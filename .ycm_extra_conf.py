# Generated by YCM Generator at 2018-09-06 12:10:10.552822

# This file is NOT licensed under the GPLv3, which is the license for the rest
# of YouCompleteMe.
#
# Here's the license text for this file:
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <http://unlicense.org/>

import os
import ycm_core
import glob

sdk_path = '/usr/local/google/home/gjc/Documents/nRF5_SDK_15.2.0_9412b96'

flags = [
    '-D_DEFAULT_SOURCE',
    '-D_GNU_SOURCE',
    '-DWITH_POSIX',
    'c++',
    '-I./include',
    '-I./include/cfgs',
    '-I./include/platforms/nrf52840',
    '-I./third_party/openthread/examples/platforms',
    '-I./third_party/openthread/include',
    '-I./third_party/openthread/src/core',
    '-I./third_party/openthread/src/ncp',
    '-I./third_party/openthread/src/cli',
    '-I./third_party/openthread/src/',
    '-I./third_party/openthread/third_party/mbedtls/repo/include',
    '-I./third_party/openthread/third_party/mbedtls/repo/include/mbedtls',
    '-I./third_party/openthread/third_party/NordicSemiconductor/drivers/radio',
    '-I./third_party/openthread/third_party/NordicSemiconductor/drivers/radio/hal',
    '-I./third_party/openthread/third_party/NordicSemiconductor/drivers/radio/raal',
    '-I./third_party/openthread/third_party/NordicSemiconductor/libraries/crypto',
    '-I./third_party/lwip/port/',
    '-I./third_party/lwip/repo/src/apps/altcp_tls',
    '-I./third_party/lwip/repo/src/include',
    '-I./third_party/lwip/repo/src/include/ipv4',
    '-I./third_party/libjwt/repo/include',
    '-I./third_party/jansson/repo/src/',
    '-I' + os.path.join(sdk_path, 'components'),
    '-I' + os.path.join(sdk_path, 'modules/nrfx/mdk'),
    '-I' + os.path.join(sdk_path, 'external/freertos/source/include'),
    '-I' + os.path.join(sdk_path, 'external/freertos/portable/CMSIS/nrf52'),
    '-I' + os.path.join(sdk_path, 'external/freertos/portable/GCC/nrf52'),
    '-I' + os.path.join(sdk_path, 'components/libraries/fifo'),
    '-I' + os.path.join(sdk_path, 'components/libraries/strerror'),
    '-I' + os.path.join(sdk_path, 'components/toolchain/cmsis/include'),
    '-I' + os.path.join(sdk_path, 'components/libraries/util'),
    '-I' + os.path.join(sdk_path, 'components/libraries/balloc'),
    '-I' + os.path.join(sdk_path, 'components/libraries/ringbuf'),
    '-I' + os.path.join(sdk_path, 'modules/nrfx/hal'),
    '-I' + os.path.join(sdk_path, 'components/libraries/bsp'),
    '-I' + os.path.join(sdk_path, 'components/libraries/uart'),
    '-I' + os.path.join(sdk_path, 'components/libraries/log'),
    '-I' + os.path.join(sdk_path, 'modules/nrfx'),
    '-I' + os.path.join(sdk_path, 'components/libraries/experimental_section_vars'),
    '-I' + os.path.join(sdk_path, 'integration/nrfx/legacy'),
    '-I' + os.path.join(sdk_path, 'components/libraries/delay'),
    '-I' + os.path.join(sdk_path, 'integration/nrfx'),
    '-I' + os.path.join(sdk_path, 'components/drivers_nrf/nrf_soc_nosd'),
    '-I' + os.path.join(sdk_path, 'components/libraries/atomic'),
    '-I' + os.path.join(sdk_path, 'components/boards'),
    '-I' + os.path.join(sdk_path, 'components/libraries/memobj'),
    '-I' + os.path.join(sdk_path, 'modules/nrfx/drivers/include'),
    '-I' + os.path.join(sdk_path, 'external/fprintf'),
    '-I' + os.path.join(sdk_path, 'external/segger_rtt'),
    '-I' + os.path.join(sdk_path, 'components/libraries/log/src'),
    '-I' + os.path.join(sdk_path, 'external/nrf_cc310/include'),
    '-DBOARD_PCA10056',
    '-DBSP_DEFINES_ONLY',
    '-DCONFIG_GPIO_AS_PINRESET',
    '-DFLOAT_ABI_HARD',
    '-DNRF52840_XXAA',
    '-mthumb',
    '-mabi=aapcs',
    '-Wall',
    '-mfloat-abi=hard',
    '-mfpu=fpv4-sp-d16',
    '-ffunction-sections',
    '-fdata-sections',
    '-fno-strict-aliasing',
    '-fno-builtin',
    '-fshort-enums',
    '-DFREERTOS',
    '-DOPENTHREAD_FTD=1',
    '-DOPENTHREAD_ENABLE_PLATFORM_UDP=1',
    '-DOPENTHREAD_ENABLE_PLATFORM_NETIF=1',
    '-DOPENTHREAD_ENABLE_BUILTIN_MBEDTLS=0',
    '-DLWIP_NETIF_STATUS_CALLBACK=1',
    '-DLWIP_NETIF_LOOPBACK=1',
    '-DLWIP_IPV6_NUM_ADDRESSES=6',
    '-DHAVE_CONFIG_H',
]


# Set this to the absolute path to the folder (NOT the file!) containing the
# compile_commands.json file to use that instead of 'flags'. See here for
# more details: http://clang.llvm.org/docs/JSONCompilationDatabase.html
#
# You can get CMake to generate this file for you by adding:
#   set( CMAKE_EXPORT_COMPILE_COMMANDS 1 )
# to your CMakeLists.txt file.
#
# Most projects will NOT need to set this to anything; you can just change the
# 'flags' list of compilation flags. Notice that YCM itself uses that approach.
compilation_database_folder = ''

if os.path.exists( compilation_database_folder ):
  database = ycm_core.CompilationDatabase( compilation_database_folder )
else:
  database = None

SOURCE_EXTENSIONS = [ '.C', '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]

def DirectoryOfThisScript():
  return os.path.dirname( os.path.abspath( __file__ ) )


def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):
  if not working_directory:
    return list( flags )
  new_flags = []
  make_next_absolute = False
  path_flags = [ '-isystem', '-I', '-iquote', '--sysroot=' ]
  for flag in flags:
    new_flag = flag

    if make_next_absolute:
      make_next_absolute = False
      if not flag.startswith( '/' ):
        new_flag = os.path.join( working_directory, flag )

    for path_flag in path_flags:
      if flag == path_flag:
        make_next_absolute = True
        break

      if flag.startswith( path_flag ):
        path = flag[ len( path_flag ): ]
        new_flag = path_flag + os.path.join( working_directory, path )
        break

    if new_flag:
      new_flags.append( new_flag )
  return new_flags


def IsHeaderFile( filename ):
  extension = os.path.splitext( filename )[ 1 ]
  return extension in [ '.H', '.h', '.hxx', '.hpp', '.hh' ]


def GetCompilationInfoForFile( filename ):
  # The compilation_commands.json file generated by CMake does not have entries
  # for header files. So we do our best by asking the db for flags for a
  # corresponding source file, if any. If one exists, the flags for that file
  # should be good enough.
  if IsHeaderFile( filename ):
    basename = os.path.splitext( filename )[ 0 ]
    for extension in SOURCE_EXTENSIONS:
      replacement_file = basename + extension
      if os.path.exists( replacement_file ):
        compilation_info = database.GetCompilationInfoForFile(
          replacement_file )
        if compilation_info.compiler_flags_:
          return compilation_info
    return None
  return database.GetCompilationInfoForFile( filename )


def FlagsForFile( filename, **kwargs ):
  if database:
    # Bear in mind that compilation_info.compiler_flags_ does NOT return a
    # python list, but a "list-like" StringVec object
    compilation_info = GetCompilationInfoForFile( filename )
    if not compilation_info:
      return None

    final_flags = MakeRelativePathsInFlagsAbsolute(
      compilation_info.compiler_flags_,
      compilation_info.compiler_working_dir_ )

  else:
    relative_to = DirectoryOfThisScript()
    final_flags = MakeRelativePathsInFlagsAbsolute( flags, relative_to )

  return {
    'flags': final_flags,
    'do_cache': True
  }

